metadata:
  original_file: 08_State_Management.md
  conversion_date: '2025-06-30T11:00:00Z'
  format: yaml
frontmatter:
  title: State Management
  description: Technical specification for state management
  type: developer-guide
  status: current
  priority: medium
  last_updated: '2025-06-22'
  agent_notes: AI agent guidance for implementing state management
sections:
- level: 1
  title: 3. State Management
  type: section
  content: ''
- level: 2
  title: Agent Context
  type: section
  content: '**For AI Agents**: Complete state management documentation covering Zustand
    implementation, persistent storage, and state coordination patterns. Use this
    when implementing state management, understanding data flow, planning state architecture,
    or building state coordination systems. Essential foundation for all state management
    work.


    **Implementation Notes**: Contains state management patterns, Zustand store implementations,
    persistence strategies, and state coordination mechanisms. Includes detailed state
    architecture and data flow patterns.

    **Quality Requirements**: Keep state management patterns and data flow documentation
    synchronized with actual implementation. Maintain accuracy of state coordination
    and persistence mechanisms.

    **Integration Points**: Foundation for data management, links to storage systems,
    component state, and persistence layers for comprehensive state management coverage.


    Kai-CD uses [Zustand](https://github.com/pmndrs/zustand) for global state management.
    It provides a simple, unopinionated, and performant way to manage state across
    the entire application. The state is divided into several "stores," each with
    a specific domain of responsibility.


    A key feature of the state management is its persistence layer, which uses a custom
    middleware to save and retrieve data from the `chrome.storage.local` API. This
    ensures that user-configured services and settings are preserved between browser
    sessions.'
- level: 2
  title: State Management Diagram
  type: section
  content: "This diagram shows the different stores, what they manage, and how they\
    \ interact with the UI and the persistence layer.\n\n```mermaid\ngraph TD\n  \
    \  subgraph \"React UI Components\"\n        direction LR\n        A[ServiceManagement.tsx]\n\
    \        B[LlmChatView.tsx]\n        C[SettingsView.tsx]\n        D[Tab.tsx]\n\
    \    end\n\n    subgraph \"Zustand Stores\"\n        direction TB\n        ServiceStore[serviceStore.ts<br/>-\
    \ Services[]<br/>- selectedServiceId<br/>- customUrls{}]\n        ViewStateStore[viewStateStore.ts<br/>-\
    \ activeServiceId<br/>- activeModel<br/>- chatParameters{}]\n        SettingsStore[settingsStore.ts<br/>-\
    \ theme<br/>- logLevel]\n        LogStore[logStore.ts<br/>- logs[]]\n    end\n\
    \n    subgraph \"Persistence Layer\"\n        direction TB\n        PersistMiddleware[Zustand\
    \ Persist Middleware]\n        ChromeStorage[chromeStorage.ts Adapter]\n     \
    \   BrowserStorage[chrome.storage.local]\n    end\n\n    A -- \"Reads/Writes\"\
    \ --> ServiceStore\n    B -- \"Reads/Writes\" --> ViewStateStore\n    B -- \"\
    Reads/Writes\" --> ServiceStore\n    C -- \"Reads/Writes\" --> SettingsStore\n\
    \    D -- \"Reads\" --> ServiceStore\n    D -- \"Reads\" --> SettingsStore\n \
    \   D -- \"Reads\" --> LogStore\n\n    ServiceStore -- \"Uses\" --> PersistMiddleware\n\
    \    SettingsStore -- \"Uses\" --> PersistMiddleware\n\n    PersistMiddleware\
    \ -- \"Uses\" --> ChromeStorage\n    ChromeStorage -- \"Writes/Reads\" --> BrowserStorage\n\
    ```\n\n---"
- level: 2
  title: Core Stores
  type: section
  content: ''
- level: 3
  title: 1. `serviceStore.ts`
  type: section
  content: "This is the most important and complex store in the application.\n\n-\
    \   **Purpose:** Manages the array of all services the user has configured. This\
    \ includes their full definition, credentials, chat/generation history, and current\
    \ status.\n-   **State:**\n    -   `services: Service[]`: The master list of service\
    \ objects.\n    -   `selectedServiceId: string | null`: The ID of the service\
    \ currently being edited in the `ServiceManagement` view.\n    -   `customUrls:\
    \ Record<string, string>`: A temporary holding area for the base URL a user is\
    \ typing into the `ServiceForm`, used for dynamic URL generation.\n-   **Persistence:**\
    \ This store is **persisted**.\n-   **Hydration & Race Conditions:**\n    -  \
    \ The rehydration of this store from `chrome.storage.local` is **asynchronous**.\
    \ Historically, this was a major source of bugs, where the UI would try to read\
    \ the service list before it was loaded.\n    -   To solve this, the store contains\
    \ a `_hasHydrated` flag. UI components that depend on the `services` array **must**\
    \ check if `_hasHydrated` is true before attempting to render. The `useServiceStore.persist.onFinishHydration`\
    \ method is used to set this flag once the data is loaded.\n    -   The `merge`\
    \ function in the `persist` middleware is custom and critical. It ensures that\
    \ when state is loaded from storage, it is intelligently merged with the initial\
    \ default state from the service definitions. This allows for default services\
    \ to be updated in the code without overwriting a user's existing, configured\
    \ services."
- level: 3
  title: 2. `viewStateStore.ts`
  type: section
  content: "-   **Purpose:** Manages the \"view\" or \"session\" state. This is ephemeral\
    \ data that describes what the user is currently doing.\n-   **State:**\n    -\
    \   `activeServiceId: string | null`: The ID of the service currently being used\
    \ in `CapabilityUI`.\n    -   `activeModel: string | null`: The name of the specific\
    \ model selected (e.g., `'gemma2'`).\n    -   `chatParameters: Record<string,\
    \ any>`: An object holding the current values for the active service's parameters\
    \ (e.g., `temperature`, `top_p`).\n-   **Persistence:** This store is **not persisted**.\
    \ Its state is derived and reset based on user actions within a session. When\
    \ the user selects a new service, the `setActiveServiceId` action in this store\
    \ is responsible for populating the `chatParameters` from the new service's definition."
- level: 3
  title: 3. `settingsStore.ts`
  type: section
  content: "-   **Purpose:** Manages user-configurable settings that are not specific\
    \ to any one service.\n-   **State:**\n    -   `theme: 'light' | 'dark' | 'system'`:\
    \ The current UI theme.\n    -   `logLevel: 'debug' | 'info' | 'warn' | 'error'`:\
    \ The verbosity of the application logger.\n-   **Persistence:** This store is\
    \ **persisted**."
- level: 3
  title: 4. `logStore.ts`
  type: section
  content: "-   **Purpose:** Acts as a centralized, in-memory buffer for all application\
    \ logs.\n-   **State:**\n    -   `logs: LogEntry[]`: An array of all log objects\
    \ generated by the application."
