title: "Backend Admin App Production Deployment"
version: "1.0"
status: "ACTIVE"
created: "2025-07-01T21:30:00Z"
last_updated: "2025-07-01T21:30:00Z"

deployment_overview:
  app_name: "kOS Backend Admin App"
  app_location: "apps/backend/"
  production_url: "http://localhost:5174"
  build_status: "VERIFIED"
  deployment_status: "READY"

build_configuration:
  build_command: "npx vite build"
  build_output: "apps/backend/dist/"
  build_artifacts:
    - "index.html (402B)"
    - "assets/index-B6PJt3Sj.css (12KB)"
    - "assets/index-BRNlvj8_.js (202KB)"
  build_time: "3.08s"
  build_success: true

production_environment:
  node_version: "18+"
  required_services:
    openwebui:
      url: "http://localhost:3000"
      status: "RUNNING"
      health_check: "HTTP 200"
    jellyfin:
      url: "http://localhost:8096"
      status: "RUNNING"
      health_check: "HTTP 302"
    ollama:
      url: "http://localhost:11434"
      status: "OPTIONAL"
      health_check: "HTTP 200"

deployment_scripts:
  build_production:
    command: "cd apps/backend && npx vite build"
    description: "Build production assets"
    expected_output: "dist/ directory with optimized files"
  
  start_production:
    command: "cd apps/backend && npx vite preview --port 5174"
    description: "Start production server"
    expected_output: "Server running on http://localhost:5174"
  
  deploy_with_nginx:
    command: |
      # Copy dist files to nginx directory
      sudo cp -r apps/backend/dist/* /var/www/backend-admin/
      # Restart nginx
      sudo systemctl restart nginx
    description: "Deploy to nginx web server"
    requirements: "nginx installed and configured"

nginx_configuration:
  server_block: |
    server {
        listen 80;
        server_name backend-admin.local;
        root /var/www/backend-admin;
        index index.html;
        
        location / {
            try_files $uri $uri/ /index.html;
        }
        
        # API proxy for services
        location /api/openwebui/ {
            proxy_pass http://localhost:3000/api/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
        
        location /api/jellyfin/ {
            proxy_pass http://localhost:8096/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
    }
  file_location: "/etc/nginx/sites-available/backend-admin"
  enable_command: "sudo ln -s /etc/nginx/sites-available/backend-admin /etc/nginx/sites-enabled/"

docker_deployment:
  dockerfile: |
    FROM nginx:alpine
    COPY apps/backend/dist/ /usr/share/nginx/html/
    COPY nginx.conf /etc/nginx/conf.d/default.conf
    EXPOSE 80
    CMD ["nginx", "-g", "daemon off;"]
  
  docker_compose_service: |
    backend-admin:
      build: .
      ports:
        - "80:80"
      depends_on:
        - openwebui
        - jellyfin
      environment:
        - NODE_ENV=production

environment_variables:
  production:
    VITE_API_BASE_URL: "http://localhost:3000"
    VITE_JELLYFIN_URL: "http://localhost:8096"
    VITE_RAG_SERVICE_URL: "http://localhost:8000"
    VITE_APP_ENV: "production"
  
  development:
    VITE_API_BASE_URL: "http://localhost:3000"
    VITE_JELLYFIN_URL: "http://localhost:8096"
    VITE_RAG_SERVICE_URL: "http://localhost:8000"
    VITE_APP_ENV: "development"

monitoring_and_health_checks:
  health_endpoints:
    - "http://localhost:5174/ (Main app)"
    - "http://localhost:3000/api/v1/models (Open WebUI)"
    - "http://localhost:8096/System/Info (Jellyfin)"
  
  monitoring_script: |
    #!/bin/bash
    # Health check script
    curl -f http://localhost:5174/ || echo "Backend admin app down"
    curl -f http://localhost:3000/api/v1/models || echo "Open WebUI down"
    curl -f http://localhost:8096/System/Info || echo "Jellyfin down"

deployment_checklist:
  pre_deployment:
    - "Verify all services are running (Open WebUI, Jellyfin)"
    - "Run production build: npx vite build"
    - "Test build output in dist/ directory"
    - "Verify environment variables are set"
  
  deployment:
    - "Copy dist/ files to web server directory"
    - "Configure nginx reverse proxy (if using)"
    - "Set up SSL certificates (if required)"
    - "Configure service discovery endpoints"
  
  post_deployment:
    - "Test all app functionality"
    - "Verify service connections"
    - "Test RAG integration"
    - "Monitor error logs"
    - "Verify performance metrics"

troubleshooting:
  common_issues:
    build_failure:
      problem: "TypeScript compilation errors"
      solution: "Use 'npx vite build' instead of 'npm run build'"
      notes: "TypeScript compiler has module resolution issues in workspace"
    
    service_connection_failure:
      problem: "Services not accessible"
      solution: "Verify Docker services are running: docker ps"
      notes: "Check service URLs and ports"
    
    nginx_configuration:
      problem: "Nginx not serving app correctly"
      solution: "Check nginx configuration and restart service"
      notes: "Ensure try_files directive includes /index.html"

performance_optimization:
  build_optimizations:
    - "Code splitting enabled"
    - "CSS minification active"
    - "JavaScript minification active"
    - "Asset compression (gzip) enabled"
  
  runtime_optimizations:
    - "Service discovery caching (30s intervals)"
    - "RAG integration with fallback responses"
    - "IndexedDB for local storage"
    - "Jotai atomic state management"

security_considerations:
  production_security:
    - "HTTPS/SSL encryption required"
    - "CORS configuration for API endpoints"
    - "Environment variable protection"
    - "Service authentication (if required)"
  
  development_security:
    - "Local development only"
    - "No sensitive data exposure"
    - "Service URLs are localhost only"

documentation:
  user_guide: "apps/backend/README.md"
  api_documentation: "ai-q/05_modules/backend_admin_app_architecture.yml"
  deployment_guide: "This file"
  troubleshooting: "See troubleshooting section above"

next_steps:
  immediate:
    - "Deploy to production environment"
    - "Set up monitoring and logging"
    - "Configure SSL certificates"
    - "Create user documentation"
  
  future:
    - "Add authentication system"
    - "Implement user management"
    - "Add advanced monitoring"
    - "Scale to multiple instances" 