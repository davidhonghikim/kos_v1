name: kos-v1
services:
  api:
    build:
      context: ..
      dockerfile: docker/Dockerfile.unified
    container_name: kos-api-server
    ports:
    - 8000:8000
    environment:
    - API_CONTAINER_NAME=kos-api-server
    - API_ENABLE=true
    - API_EXTERNAL_PORT=8000
    - API_HOST=localhost
    - API_IMAGE=kos-v1-api:latest
    - API_INTERNAL_PORT=8000
    - API_PROFILE=core
    - ADMIN_USER=kos-admin
    - ADMIN_PASSWORD=kos-30437
    volumes:
    - kos-api-data:/data
    networks:
    - kos-network
    restart: unless-stopped
    healthcheck:
      test:
      - CMD-SHELL
      - curl -f http://localhost:8000/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
    - postgres
    - redis
  frontend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.unified
    container_name: kos-web-dashboard
    ports:
    - 3000:3000
    environment:
    - FRONTEND_CONTAINER_NAME=kos-web-dashboard
    - FRONTEND_ENABLE=true
    - FRONTEND_EXTERNAL_PORT=3000
    - FRONTEND_HOST=localhost
    - FRONTEND_IMAGE=kos-v1-frontend:latest
    - FRONTEND_INTERNAL_PORT=3000
    - FRONTEND_PROFILE=core
    - ADMIN_USER=kos-admin
    - ADMIN_PASSWORD=kos-30437
    volumes:
    - kos-frontend-data:/data
    networks:
    - kos-network
    restart: unless-stopped
    healthcheck:
      test:
      - CMD-SHELL
      - curl -f http://localhost:3000 || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
    - api
  postgres:
    image: postgres:15-alpine
    container_name: ${KOS_POSTGRES_CONTAINER_NAME}
    ports:
    - 5432:5432
    environment:
    - POSTGRES_CONTAINER_NAME=${KOS_POSTGRES_CONTAINER_NAME}
    - POSTGRES_DB=kos
    - POSTGRES_ENABLE=true
    - POSTGRES_EXTERNAL_PORT=5432
    - POSTGRES_HOST=localhost
    - POSTGRES_IMAGE=postgres:15-alpine
    - POSTGRES_INTERNAL_PORT=5432
    - POSTGRES_PASSWORD=kos-30437
    - POSTGRES_PROFILE=core
    - POSTGRES_USER=kos-admin
    - ADMIN_USER=kos-admin
    - ADMIN_PASSWORD=kos-30437
    - POSTGRES_USER=kos-admin
    - POSTGRES_PASSWORD=kos-30437
    volumes:
    - kos-postgres-data:/data
    networks:
    - kos-network
    restart: unless-stopped
    healthcheck:
      test:
      - CMD-SHELL
      - pg_isready -U kos-admin -d kos
      interval: 30s
      timeout: 10s
      retries: 3
  redis:
    image: redis:7-alpine
    container_name: ${KOS_REDIS_CONTAINER_NAME}
    ports:
    - 6379:6379
    environment:
    - REDIS_COMMANDER_CONTAINER_NAME=${KOS_REDIS_COMMANDER_CONTAINER_NAME}
    - REDIS_COMMANDER_ENABLE=true
    - REDIS_COMMANDER_EXTERNAL_PORT=8085
    - REDIS_COMMANDER_HOST=localhost
    - REDIS_COMMANDER_IMAGE=rediscommander/redis-commander:latest
    - REDIS_COMMANDER_INTERNAL_PORT=8081
    - REDIS_COMMANDER_PASSWORD=kos-30437
    - REDIS_COMMANDER_PROFILE=admin
    - REDIS_COMMANDER_REDIS_HOSTS=local:redis:6379:0:kos-30437
    - REDIS_COMMANDER_USER=kos-admin
    - REDIS_CONTAINER_NAME=${KOS_REDIS_CONTAINER_NAME}
    - REDIS_ENABLE=true
    - REDIS_EXTERNAL_PORT=6379
    - REDIS_HOST=localhost
    - REDIS_IMAGE=redis:7-alpine
    - REDIS_INTERNAL_PORT=6379
    - REDIS_PASSWORD=kos-30437
    - REDIS_PROFILE=core
    - ADMIN_USER=kos-admin
    - ADMIN_PASSWORD=kos-30437
    - REDIS_PASSWORD=kos-30437
    volumes:
    - kos-redis-data:/data
    networks:
    - kos-network
    restart: unless-stopped
    healthcheck:
      test:
      - CMD-SHELL
      - redis-cli ping | grep PONG
      interval: 30s
      timeout: 10s
      retries: 3
  nginx:
    image: nginx:alpine
    container_name: ${KOS_NGINX_CONTAINER_NAME}
    ports:
    - 80:80
    environment:
    - NGINX_CONTAINER_NAME=${KOS_NGINX_CONTAINER_NAME}
    - NGINX_ENABLE=true
    - NGINX_EXTERNAL_PORT=80
    - NGINX_HOST=localhost
    - NGINX_IMAGE=nginx:alpine
    - NGINX_INTERNAL_PORT=80
    - NGINX_PROFILE=core
    - NGINX_SSL_EXTERNAL_PORT=443
    - NGINX_SSL_INTERNAL_PORT=443
    - ADMIN_USER=kos-admin
    - ADMIN_PASSWORD=kos-30437
    volumes:
    - kos-nginx-data:/data
    networks:
    - kos-network
    restart: unless-stopped
    healthcheck:
      test:
      - CMD-SHELL
      - curl -f http://localhost:80/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
  minio:
    image: minio/minio:latest
    container_name: ${KOS_MINIO_CONTAINER_NAME}
    ports:
    - 9000:9000
    - 9001:9001
    environment:
    - MINIO_COMMAND=server /data --console-address ":9001"
    - MINIO_CONSOLE_EXTERNAL_PORT=9001
    - MINIO_CONSOLE_INTERNAL_PORT=9001
    - MINIO_CONTAINER_NAME=${KOS_MINIO_CONTAINER_NAME}
    - MINIO_ENABLE=true
    - MINIO_EXTERNAL_PORT=9000
    - MINIO_HOST=localhost
    - MINIO_IMAGE=minio/minio:latest
    - MINIO_INTERNAL_PORT=9000
    - MINIO_PROFILE=core
    - MINIO_ROOT_PASSWORD=kos-30437
    - MINIO_ROOT_USER=kos-admin
    - ADMIN_USER=kos-admin
    - ADMIN_PASSWORD=kos-30437
    volumes:
    - kos-minio-data:/data
    networks:
    - kos-network
    restart: unless-stopped
    healthcheck:
      test:
      - CMD-SHELL
      - curl -f http://localhost:9000/minio/health/live || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
    command: server /data --console-address ":9001"
  neo4j:
    image: neo4j:5.15
    container_name: ${KOS_NEO4J_CONTAINER_NAME}
    ports:
    - 7687:7687
    - 7474:7474
    environment:
    - NEO4J_CONTAINER_NAME=${KOS_NEO4J_CONTAINER_NAME}
    - NEO4J_ENABLE=true
    - NEO4J_EXTERNAL_PORT=7687
    - NEO4J_HOST=localhost
    - NEO4J_HTTP_EXTERNAL_PORT=7474
    - NEO4J_HTTP_INTERNAL_PORT=7474
    - NEO4J_IMAGE=neo4j:5.15
    - NEO4J_INTERNAL_PORT=7687
    - NEO4J_PASSWORD=kos-30437
    - NEO4J_PROFILE=core
    - NEO4J_USER=kos-admin
    - ADMIN_USER=kos-admin
    - ADMIN_PASSWORD=kos-30437
    - NEO4J_USER=kos-admin
    - NEO4J_PASSWORD=kos-30437
    volumes:
    - kos-neo4j-data:/data
    networks:
    - kos-network
    restart: unless-stopped
    healthcheck:
      test:
      - CMD-SHELL
      - curl -f http://localhost:7474/browser/ || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: ${KOS_ELASTICSEARCH_CONTAINER_NAME}
    ports:
    - 9200:9200
    - 9300:9300
    environment:
    - ELASTICSEARCH_CLUSTER_EXTERNAL_PORT=9300
    - ELASTICSEARCH_CLUSTER_INTERNAL_PORT=9300
    - ELASTICSEARCH_CONTAINER_NAME=${KOS_ELASTICSEARCH_CONTAINER_NAME}
    - ELASTICSEARCH_ENABLE=true
    - ELASTICSEARCH_EXTERNAL_PORT=9200
    - ELASTICSEARCH_HOST=localhost
    - ELASTICSEARCH_IMAGE=docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    - ELASTICSEARCH_INTERNAL_PORT=9200
    - ELASTICSEARCH_PASSWORD=kos-30437
    - ELASTICSEARCH_PROFILE=core
    - ELASTICSEARCH_USERNAME=kos-admin
    - ADMIN_USER=kos-admin
    - ADMIN_PASSWORD=kos-30437
    - ELASTICSEARCH_PASSWORD=kos-30437
    volumes:
    - kos-elasticsearch-data:/data
    networks:
    - kos-network
    restart: unless-stopped
    healthcheck:
      test:
      - CMD-SHELL
      - curl -f http://localhost:9200/_cluster/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
  weaviate:
    image: semitechnologies/weaviate:1.22.4
    container_name: ${KOS_WEAVIATE_CONTAINER_NAME}
    ports:
    - 8082:8080
    environment:
    - WEAVIATE_AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED=true
    - WEAVIATE_AUTHENTICATION_APIKEY_ENABLED=false
    - WEAVIATE_AUTHENTICATION_OIDC_ENABLED=false
    - WEAVIATE_CLOUD_API_KEY=
    - WEAVIATE_CLOUD_ENABLE=false
    - WEAVIATE_CLOUD_URL=
    - WEAVIATE_CLUSTER_HOSTNAME=node1
    - WEAVIATE_CONTAINER_NAME=${KOS_WEAVIATE_CONTAINER_NAME}
    - WEAVIATE_DEFAULT_VECTORIZER_MODULE=text2vec-transformers
    - WEAVIATE_ENABLE=true
    - WEAVIATE_ENABLE_MODULES=text2vec-transformers
    - WEAVIATE_EXTERNAL_PORT=8082
    - WEAVIATE_HOST=localhost
    - WEAVIATE_IMAGE=semitechnologies/weaviate:1.22.4
    - WEAVIATE_INTERNAL_PORT=8080
    - WEAVIATE_PERSISTENCE_DATA_PATH=/var/lib/weaviate
    - WEAVIATE_PROFILE=core
    - WEAVIATE_QUERY_DEFAULTS_LIMIT=25
    - WEAVIATE_TRANSFORMERS_INFERENCE_API=http://huggingface:8083
    - ADMIN_USER=kos-admin
    - ADMIN_PASSWORD=kos-30437
    volumes:
    - kos-weaviate-data:/data
    networks:
    - kos-network
    restart: unless-stopped
    healthcheck:
      test:
      - CMD-SHELL
      - curl -f http://localhost:8080/v1/.well-known/ready || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
  nextcloud:
    image: nextcloud:25.0.0
    container_name: ${KOS_NEXTCLOUD_CONTAINER_NAME}
    ports:
    - 8083:8083
    environment:
    - NEXTCLOUD_ADMIN_PASSWORD=kos-30437
    - NEXTCLOUD_ADMIN_USER=kos-admin
    - NEXTCLOUD_CONTAINER_NAME=${KOS_NEXTCLOUD_CONTAINER_NAME}
    - NEXTCLOUD_DB_PASSWORD=kos-30437
    - NEXTCLOUD_ENABLE=true
    - NEXTCLOUD_EXTERNAL_PORT=8083
    - NEXTCLOUD_HOST=localhost
    - NEXTCLOUD_IMAGE=nextcloud:25.0.0
    - NEXTCLOUD_INTERNAL_PORT=8083
    - NEXTCLOUD_PROFILE=core
    - ADMIN_USER=kos-admin
    - ADMIN_PASSWORD=kos-30437
    volumes:
    - kos-nextcloud-data:/data
    networks:
    - kos-network
    restart: unless-stopped
    healthcheck:
      test:
      - CMD-SHELL
      - curl -f http://localhost:8083/status.php || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: ${KOS_PROMETHEUS_CONTAINER_NAME}
    ports:
    - 9090:9090
    environment:
    - PROMETHEUS_CONTAINER_NAME=${KOS_PROMETHEUS_CONTAINER_NAME}
    - PROMETHEUS_ENABLE=true
    - PROMETHEUS_EXTERNAL_PORT=9090
    - PROMETHEUS_HOST=localhost
    - PROMETHEUS_IMAGE=prom/prometheus:v2.48.0
    - PROMETHEUS_INTERNAL_PORT=9090
    - PROMETHEUS_PROFILE=core
    - ADMIN_USER=kos-admin
    - ADMIN_PASSWORD=kos-30437
    volumes:
    - kos-prometheus-data:/data
    networks:
    - kos-network
    restart: unless-stopped
    healthcheck:
      test:
      - CMD-SHELL
      - curl -f http://localhost:9090/-/healthy || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
    - elasticsearch
  grafana:
    image: grafana/grafana:10.2.0
    container_name: ${KOS_GRAFANA_CONTAINER_NAME}
    ports:
    - 3007:3000
    environment:
    - GRAFANA_ADMIN_PASSWORD=kos-30437
    - GRAFANA_ADMIN_USER=kos-admin
    - GRAFANA_CONTAINER_NAME=${KOS_GRAFANA_CONTAINER_NAME}
    - GRAFANA_ENABLE=true
    - GRAFANA_EXTERNAL_PORT=3007
    - GRAFANA_HOST=localhost
    - GRAFANA_IMAGE=grafana/grafana:10.2.0
    - GRAFANA_INTERNAL_PORT=3000
    - GRAFANA_PROFILE=core
    - ADMIN_USER=kos-admin
    - ADMIN_PASSWORD=kos-30437
    volumes:
    - kos-grafana-data:/data
    networks:
    - kos-network
    restart: unless-stopped
    healthcheck:
      test:
      - CMD-SHELL
      - curl -f http://localhost:3000/api/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
    - elasticsearch
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: ${KOS_CADVISOR_CONTAINER_NAME}
    ports:
    - 8088:8081
    environment:
    - CADVISOR_CONTAINER_NAME=${KOS_CADVISOR_CONTAINER_NAME}
    - CADVISOR_ENABLE=true
    - CADVISOR_EXTERNAL_PORT=8088
    - CADVISOR_HOST=localhost
    - CADVISOR_IMAGE=gcr.io/cadvisor/cadvisor:v0.47.2
    - CADVISOR_INTERNAL_PORT=8081
    - CADVISOR_PROFILE=core
    - ADMIN_USER=kos-admin
    - ADMIN_PASSWORD=kos-30437
    volumes:
    - kos-cadvisor-data:/data
    networks:
    - kos-network
    restart: unless-stopped
    healthcheck:
      test:
      - CMD-SHELL
      - curl -f http://localhost:8081/healthz || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
  vault:
    image: hashicorp/vault:1.15.0
    container_name: ${KOS_VAULT_CONTAINER_NAME}
    ports:
    - 8200:8200
    environment:
    - VAULT_CONTAINER_NAME=${KOS_VAULT_CONTAINER_NAME}
    - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
    - VAULT_DEV_ROOT_TOKEN_ID=kos-30437
    - VAULT_ENABLE=true
    - VAULT_EXTERNAL_PORT=8200
    - VAULT_HOST=localhost
    - VAULT_IMAGE=hashicorp/vault:1.15.0
    - VAULT_INTERNAL_PORT=8200
    - VAULT_PROFILE=core
    - ADMIN_USER=kos-admin
    - ADMIN_PASSWORD=kos-30437
    volumes:
    - kos-vault-data:/data
    networks:
    - kos-network
    restart: unless-stopped
    healthcheck:
      test:
      - CMD-SHELL
      - curl -f http://localhost:8200/v1/sys/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
networks:
  kos-network:
    driver: bridge
    ipam:
      config:
      - subnet: 172.20.0.0/16
volumes:
  kos-frontend-data:
    driver: local
  kos-prometheus-data:
    driver: local
  kos-nginx-data:
    driver: local
  kos-elasticsearch-data:
    driver: local
  kos-grafana-data:
    driver: local
  kos-neo4j-data:
    driver: local
  kos-cadvisor-data:
    driver: local
  kos-api-data:
    driver: local
  kos-nextcloud-data:
    driver: local
  kos-minio-data:
    driver: local
  kos-redis-data:
    driver: local
  kos-vault-data:
    driver: local
  kos-weaviate-data:
    driver: local
  kos-postgres-data:
    driver: local
